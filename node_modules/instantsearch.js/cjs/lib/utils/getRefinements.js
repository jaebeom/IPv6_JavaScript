"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _find = _interopRequireDefault(require("lodash/find"));

var _get = _interopRequireDefault(require("lodash/get"));

var _forEach = _interopRequireDefault(require("lodash/forEach"));

var _unescapeRefinement = _interopRequireDefault(require("./unescapeRefinement"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getRefinement(state, type, attributeName, name, resultsFacets) {
  var res = {
    type: type,
    attributeName: attributeName,
    name: name
  };
  var facet = (0, _find.default)(resultsFacets, {
    name: attributeName
  });
  var count;

  if (type === 'hierarchical') {
    var facetDeclaration = state.getHierarchicalFacetByName(attributeName);
    var split = name.split(facetDeclaration.separator);

    for (var i = 0; facet !== undefined && i < split.length; ++i) {
      facet = (0, _find.default)(facet.data, {
        name: split[i]
      });
    }

    count = (0, _get.default)(facet, 'count');
  } else {
    count = (0, _get.default)(facet, "data[\"".concat(res.name, "\"]"));
  }

  var exhaustive = (0, _get.default)(facet, 'exhaustive');

  if (count !== undefined) {
    res.count = count;
  }

  if (exhaustive !== undefined) {
    res.exhaustive = exhaustive;
  }

  return res;
}

function getRefinements(results, state) {
  var clearsQuery = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var res = [];
  (0, _forEach.default)(state.facetsRefinements, function (refinements, attributeName) {
    (0, _forEach.default)(refinements, function (name) {
      res.push(getRefinement(state, 'facet', attributeName, name, results.facets));
    });
  });
  (0, _forEach.default)(state.facetsExcludes, function (refinements, attributeName) {
    (0, _forEach.default)(refinements, function (name) {
      res.push({
        type: 'exclude',
        attributeName: attributeName,
        name: name,
        exclude: true
      });
    });
  });
  (0, _forEach.default)(state.disjunctiveFacetsRefinements, function (refinements, attributeName) {
    (0, _forEach.default)(refinements, function (name) {
      res.push(getRefinement(state, 'disjunctive', attributeName, // we unescapeRefinement any disjunctive refined value since they can be escaped
      (0, _unescapeRefinement.default)(name), results.disjunctiveFacets));
    });
  });
  (0, _forEach.default)(state.hierarchicalFacetsRefinements, function (refinements, attributeName) {
    (0, _forEach.default)(refinements, function (name) {
      res.push(getRefinement(state, 'hierarchical', attributeName, name, results.hierarchicalFacets));
    });
  });
  (0, _forEach.default)(state.numericRefinements, function (operators, attributeName) {
    (0, _forEach.default)(operators, function (values, operator) {
      (0, _forEach.default)(values, function (value) {
        res.push({
          type: 'numeric',
          attributeName: attributeName,
          name: "".concat(value),
          numericValue: value,
          operator: operator
        });
      });
    });
  });
  (0, _forEach.default)(state.tagRefinements, function (name) {
    res.push({
      type: 'tag',
      attributeName: '_tags',
      name: name
    });
  });

  if (clearsQuery && state.query && state.query.trim()) {
    res.push({
      attributeName: 'query',
      type: 'query',
      name: state.query,
      query: state.query
    });
  }

  return res;
}

var _default = getRefinements;
exports.default = _default;