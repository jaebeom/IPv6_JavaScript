"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _algoliasearchHelper = _interopRequireDefault(require("algoliasearch-helper"));

var _isEqual = _interopRequireDefault(require("lodash/isEqual"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var RoutingManager =
/*#__PURE__*/
function () {
  function RoutingManager() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        instantSearchInstance = _ref.instantSearchInstance,
        router = _ref.router,
        stateMapping = _ref.stateMapping;

    _classCallCheck(this, RoutingManager);

    this.firstRender = true;
    this.router = router;
    this.stateMapping = stateMapping;
    this.instantSearchInstance = instantSearchInstance;
    this.currentUIState = this.stateMapping.routeToState(this.router.read());
  }

  _createClass(RoutingManager, [{
    key: "init",
    value: function init(_ref2) {
      var state = _ref2.state;
      // store the initial state from the storage
      // so that we can compare it with the state after the first render
      // in case the searchFunction has modifyied it.
      this.initState = this.getAllUIStates({
        searchParameters: state
      });
    }
  }, {
    key: "getConfiguration",
    value: function getConfiguration(currentConfiguration) {
      // We have to create a `SearchParameters` because `getAllSearchParameters`
      // expects an instance of `SearchParameters` and not a plain object.
      var currentSearchParameters = _algoliasearchHelper.default.SearchParameters.make(currentConfiguration);

      return _objectSpread({}, this.getAllSearchParameters({
        uiState: this.currentUIState,
        currentSearchParameters: currentSearchParameters
      }));
    }
  }, {
    key: "render",
    value: function render(_ref3) {
      var state = _ref3.state;

      if (this.firstRender) {
        this.firstRender = false;
        this.setupRouting(state);
      }
    }
  }, {
    key: "setupRouting",
    value: function setupRouting(state) {
      var _this = this;

      var helper = this.instantSearchInstance.helper;
      this.router.onUpdate(function (route) {
        var nextUiState = _this.stateMapping.routeToState(route);

        var widgetsUIState = _this.getAllUIStates({
          searchParameters: helper.state
        });

        if ((0, _isEqual.default)(nextUiState, widgetsUIState)) return;
        _this.currentUIState = nextUiState;

        var searchParameters = _this.getAllSearchParameters({
          currentSearchParameters: state,
          instantSearchInstance: _this.instantSearchInstance,
          uiState: _this.currentUIState
        });

        helper.overrideStateWithoutTriggeringChangeEvent(searchParameters).search();
      });

      this.renderURLFromState = function (searchParameters) {
        _this.currentUIState = _this.getAllUIStates({
          searchParameters: searchParameters
        });

        var route = _this.stateMapping.stateToRoute(_this.currentUIState);

        _this.router.write(route);
      };

      helper.on('change', this.renderURLFromState); // Compare initial state and first render state, in order to see if the
      // query has been changed by a `searchFunction`. It's required because the
      // helper of the `searchFunction` does not trigger change event (not the
      // same instance).

      var firstRenderState = this.getAllUIStates({
        searchParameters: state
      });

      if (!(0, _isEqual.default)(this.initState, firstRenderState)) {
        // Force update the URL, if the state has changed since the initial read.
        // We do this in order to make the URL update when there is `searchFunction`
        // that prevent the search of the initial rendering.
        // See: https://github.com/algolia/instantsearch.js/issues/2523#issuecomment-339356157
        this.currentUIState = firstRenderState;
        var route = this.stateMapping.stateToRoute(this.currentUIState);
        this.router.write(route);
      }
    }
  }, {
    key: "dispose",
    value: function dispose() {
      if (this.renderURLFromState) {
        this.instantSearchInstance.helper.removeListener('change', this.renderURLFromState);
      }

      this.router.dispose();
    }
  }, {
    key: "getAllSearchParameters",
    value: function getAllSearchParameters(_ref4) {
      var currentSearchParameters = _ref4.currentSearchParameters,
          uiState = _ref4.uiState;
      var widgets = this.instantSearchInstance.widgets;
      var searchParameters = widgets.reduce(function (sp, w) {
        if (!w.getWidgetSearchParameters) return sp;
        return w.getWidgetSearchParameters(sp, {
          uiState: uiState
        });
      }, currentSearchParameters);
      return searchParameters;
    }
  }, {
    key: "getAllUIStates",
    value: function getAllUIStates(_ref5) {
      var searchParameters = _ref5.searchParameters;
      var _this$instantSearchIn = this.instantSearchInstance,
          widgets = _this$instantSearchIn.widgets,
          helper = _this$instantSearchIn.helper;
      var uiState = widgets.filter(function (w) {
        return Boolean(w.getWidgetState);
      }).reduce(function (u, w) {
        return w.getWidgetState(u, {
          helper: helper,
          searchParameters: searchParameters
        });
      }, {});
      return uiState;
    } // External API's

  }, {
    key: "createURL",
    value: function createURL(state) {
      var uiState = this.getAllUIStates({
        searchParameters: state
      });
      var route = this.stateMapping.stateToRoute(uiState);
      return this.router.createURL(route);
    }
  }, {
    key: "onHistoryChange",
    value: function onHistoryChange(fn) {
      var _this2 = this;

      var helper = this.instantSearchInstance.helper;
      this.router.onUpdate(function (route) {
        var nextUiState = _this2.stateMapping.routeToState(route);

        var widgetsUIState = _this2.getAllUIStates({
          searchParameters: helper.state
        });

        if ((0, _isEqual.default)(nextUiState, widgetsUIState)) return;
        _this2.currentUIState = nextUiState;

        var searchParameters = _this2.getAllSearchParameters({
          currentSearchParameters: helper.state,
          instantSearchInstance: _this2.instantSearchInstance,
          uiState: _this2.currentUIState
        });

        fn(_objectSpread({}, searchParameters));
      });
    }
  }]);

  return RoutingManager;
}();

exports.default = RoutingManager;